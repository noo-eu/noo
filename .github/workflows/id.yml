name: "id"
on:
  push:
    branches: [ main ]
    paths:
      - 'apps/id/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/id/**'
  merge_group:
    types: [checks_requested]
  workflow_dispatch:

env:
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/noo_id_test

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/id
    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v4
    - name: Install dependencies
      run: pnpm install
    - name: Run all checks
      run: |
        set +e
        FAIL=0

        echo "Running Typecheck..."
        pnpm typecheck || FAIL=1

        echo "Running Next.js lint..."
        pnpm eslint || FAIL=1

        echo "Running Prettier check..."
        pnpm prettier --check . || FAIL=1

        echo "Check if all translations keys are present..."
        pnpm i18n-utils check-missing || FAIL=1

        exit $FAIL

  unit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/id
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: noo_id_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v4
    - name: Install dependencies
      run: pnpm install
    - name: Prepare the database
      run: |
        pnpm db:test:push
        pnpm db:test:fixtures
    - name: Generate key set for testing
      run: pnpm keys:rotate
    - name: Run unit tests
      run: pnpm test:unit

  test:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/id

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: noo_id_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v4
    - name: Install mkcert
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3-tools
        curl -JLO https://dl.filippo.io/mkcert/latest?for=linux/amd64
        chmod +x mkcert-*-amd64
        sudo mv mkcert-*-amd64 /usr/local/bin/mkcert
    - name: Install dependencies
      run: pnpm install
    - name: Install Playwright Browsers
      run: pnpm playwright install --with-deps
    - name: Prepare the database
      run: |
        pnpm db:test:push
        pnpm db:test:fixtures
    - name: Generate key set for testing
      run: pnpm keys:rotate
    - name: Run Playwright tests
      run: pnpm test:e2e
    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: id/playwright-report/
        retention-days: 30

  build:
    runs-on: ubuntu-24.04-arm
    needs: [lint, unit, test]
    if: github.ref == 'refs/heads/main'
    permissions:
      packages: write
      contents: read
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        file: apps/id/Dockerfile
        tags: ghcr.io/noo-eu/id:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          NONSECRET_SENTRY_DSN=${{ vars.ID_SENTRY_DSN }}
