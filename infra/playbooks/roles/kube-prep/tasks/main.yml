- name: Allow ip_forward
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present
    sysctl_file: /etc/sysctl.d/80-noo-k8s.conf
    sysctl_set: yes

- name: Increase max_user_watches
  sysctl:
    name: fs.inotify.max_user_watches
    value: 524288
    state: present
    sysctl_file: /etc/sysctl.d/80-noo-k8s.conf
    sysctl_set: yes

- name: Increase max_user_instances
  sysctl:
    name: fs.inotify.max_user_instances
    value: 512
    state: present
    sysctl_file: /etc/sysctl.d/80-noo-k8s.conf
    sysctl_set: yes

- name: Load br_netfilter module
  modprobe:
    name: br_netfilter
    state: present

- name: Load overlay module
  modprobe:
    name: overlay
    state: present

- name: Add br_netfilter to the modules to load at boot
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: br_netfilter
    state: present
    create: yes

- name: Install required packages
  apt:
    pkg:
      - containerd
      - gnupg-agent
    state: present

- name: Check if containerd was previously configured
  shell: grep -q "SystemdCgroup" /etc/containerd/config.toml
  register: containerd_configured
  ignore_errors: yes

- name: Configure containerd
  shell: containerd config default > /etc/containerd/config.toml
  when: containerd_configured.failed

- name: Set containerd to use SystemdCgroup
  shell: sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
  when: containerd_configured.failed

- name: Change the sandbox image
  shell: sed -i 's/pause:3.6/pause:3.10/' /etc/containerd/config.toml
  when: containerd_configured.failed

- name: Restart containerd
  systemd:
    name: containerd
    state: restarted
    enabled: yes
  when: containerd_configured.failed

- name: Create a pki directory
  file:
    path: /etc/kubernetes/pki
    state: directory
    owner: root
    group: root
    mode: 0755
  when: is_k8s_master

- name: Generate an encryption config
  copy:
    dest: /etc/kubernetes/pki/secrets-encryption.yaml
    content: |
      apiVersion: apiserver.config.k8s.io/v1
      kind: EncryptionConfiguration
      resources:
        - resources:
            - secrets
          providers:
            - aesgcm:
                keys:
                  - name: key1
                    secret: {{ lookup('env', 'KUBERNETES_MASTER_KEY') }}
  when: is_k8s_master

# Kubernetes is really hard to lock down at the host level. We will neuter ufw
# within the cluster, and control the network with Cilium and Istio.
#
# If someone can come up with a definitive list of ports to allow, please submit
# a PR, but up to now it's been a whack-a-mole game.
- name: Configure the firewall
  ufw:
    rule: allow
    src: 10.0.0.0/8
